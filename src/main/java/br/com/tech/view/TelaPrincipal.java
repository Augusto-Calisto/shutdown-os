package br.com.tech.view;

import static br.com.tech.RodarAplicacao.NOME_DA_APLICACAO_DESKTOP;

import br.com.tech.model.PromptCommand;
import br.com.tech.view.component.IconeBandeja;
import br.com.tech.view.component.Tema;

import com.github.lgooddatepicker.components.DateTimePicker;

import java.awt.Desktop;
import java.awt.TrayIcon;

import java.io.IOException;

import java.net.URI;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

import java.util.Objects;

import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;

public class TelaPrincipal extends JFrame {
    private PromptCommand promptCommand;
    private boolean processoAtivado;
    private long pidProcesso;

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        promptCommand = new PromptCommand();
        
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSelecionarOpcao = new javax.swing.JLabel();
        comboBoxOpcao = new javax.swing.JComboBox<>();
        dateTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();
        lblSelecionarTempo = new javax.swing.JLabel();
        linhaHorizontal = new javax.swing.JSeparator();
        btnAtivar = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuTemas = new javax.swing.JMenu();
        menuItemWindows = new javax.swing.JMenuItem();
        menuItemMetal = new javax.swing.JMenuItem();
        menuItemNimbus = new javax.swing.JMenuItem();
        menuItemFlatLafLight = new javax.swing.JMenuItem();
        menuItemFlatLafDark = new javax.swing.JMenuItem();
        menuItemFlatLafDarcula = new javax.swing.JMenuItem();
        menuItemFlatLafIntellij = new javax.swing.JMenuItem();
        menuItemFlatLafMacLight = new javax.swing.JMenuItem();
        menuItemFlatLafMacDark = new javax.swing.JMenuItem();
        menuAjuda = new javax.swing.JMenu();
        menuItemGithub = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ShutdownOS");
        setLocationByPlatform(true);
        setName("Frame Comandos Operacionais"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblSelecionarOpcao.setText("Selecione uma opção:");
        lblSelecionarOpcao.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        comboBoxOpcao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Desligar", "Reiniciar", "Suspender", "Hibernar" }));
        comboBoxOpcao.setActionCommand("");

        dateTimePicker.getTimePicker().getSettings().setDisplaySpinnerButtons(true);
        dateTimePicker.setDateTimeStrict(java.time.LocalDateTime.now().plusMinutes(5)); // Valor Padrao 'Data/Hora atual'

        lblSelecionarTempo.setText("Selecione o tempo:");
        lblSelecionarTempo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        btnAtivar.setText("Ativar");
        btnAtivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtivarActionPerformed(evt);
            }
        });

        menuTemas.setText("Tema");

        menuItemWindows.setText("Windows");
        menuItemWindows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mudarTemaWindows(evt);
            }
        });
        menuTemas.add(menuItemWindows);

        menuItemMetal.setText("Metal");
        menuItemMetal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mudarTemaMetal(evt);
            }
        });
        menuTemas.add(menuItemMetal);

        menuItemNimbus.setText("Nimbus");
        menuItemNimbus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mudarTemaNimbus(evt);
            }
        });
        menuTemas.add(menuItemNimbus);

        menuItemFlatLafLight.setText("FlatLaf Light");
        menuItemFlatLafLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mudarTemaFlatLafLight(evt);
            }
        });
        menuTemas.add(menuItemFlatLafLight);

        menuItemFlatLafDark.setText("FlatLaf Dark");
        menuItemFlatLafDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mudarTemaFlatLafDark(evt);
            }
        });
        menuTemas.add(menuItemFlatLafDark);

        menuItemFlatLafDarcula.setText("FlatLaf Darcula");
        menuItemFlatLafDarcula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mudarTemaFlatLafDarcula(evt);
            }
        });
        menuTemas.add(menuItemFlatLafDarcula);

        menuItemFlatLafIntellij.setText("FlatLaf IntelliJ");
        menuItemFlatLafIntellij.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mudarTemaFlatLafIntellij(evt);
            }
        });
        menuTemas.add(menuItemFlatLafIntellij);

        menuItemFlatLafMacLight.setText("FlatLaf Mac Light");
        menuItemFlatLafMacLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mudarTemaFlatLafMacLight(evt);
            }
        });
        menuTemas.add(menuItemFlatLafMacLight);

        menuItemFlatLafMacDark.setText("FlatLaf Mac Dark");
        menuItemFlatLafMacDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mudarTemaFlatLafMacDark(evt);
            }
        });
        menuTemas.add(menuItemFlatLafMacDark);

        menuBar.add(menuTemas);

        menuAjuda.setText("Ajuda");

        menuItemGithub.setText("GitHub");
        menuItemGithub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirLinkGithub(evt);
            }
        });
        menuAjuda.add(menuItemGithub);

        menuBar.add(menuAjuda);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSelecionarTempo)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboBoxOpcao, 0, 248, Short.MAX_VALUE)
                        .addGap(139, 139, 139))
                    .addComponent(lblSelecionarOpcao, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                    .addComponent(linhaHorizontal))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addComponent(btnAtivar, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSelecionarOpcao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxOpcao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblSelecionarTempo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(linhaHorizontal, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(btnAtivar)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtivarActionPerformed
        try {
            if(!processoAtivado) {
                String opcao = comboBoxOpcao.getSelectedItem().toString();
                
                LocalDateTime dataHoraAtual = LocalDateTime.now();

                LocalDateTime dataHoraEvento = dateTimePicker.getDateTimeStrict();
                
                Objects.requireNonNull(dataHoraEvento, "Verifique se você selecionou a data e/ou hora!!!");

                long diferencaEmSegundos = ChronoUnit.SECONDS.between(dataHoraAtual, dataHoraEvento);
            
                if("DESLIGAR".equalsIgnoreCase(opcao)) {
                    pidProcesso = promptCommand.desligarComputador(diferencaEmSegundos);
                } 
                
                if("REINICIAR".equalsIgnoreCase(opcao)) {
                    pidProcesso = promptCommand.reiniciarComputador(diferencaEmSegundos);
                }
                
                if("HIBERNAR".equalsIgnoreCase(opcao)) {
                    pidProcesso = promptCommand.hibernarComputador(diferencaEmSegundos);
                }
                
                JOptionPane.showMessageDialog(null, "O processo de " + opcao.toUpperCase() + " foi ativado", NOME_DA_APLICACAO_DESKTOP, JOptionPane.INFORMATION_MESSAGE);
              
                btnAtivar.setText("Cancelar");
                
                comboBoxOpcao.setEnabled(false);
                
                dateTimePicker.setEnabled(false);

                processoAtivado = true;
                                
            } else {
                promptCommand.cancelarProcesso(pidProcesso);
                
                JOptionPane.showMessageDialog(null, "Processo cancelado", NOME_DA_APLICACAO_DESKTOP, JOptionPane.INFORMATION_MESSAGE);

                btnAtivar.setText("Ativar");
                
                comboBoxOpcao.setEnabled(true);
                
                dateTimePicker.setEnabled(true);
                
                processoAtivado = false;
            }
            
        } catch(IOException ioException) {
            JOptionPane.showMessageDialog(null, ioException.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        
        } catch(IllegalArgumentException illegalArgumentException) {
            JOptionPane.showMessageDialog(null, illegalArgumentException.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        
        } catch(NullPointerException nullPointerException) {
            JOptionPane.showMessageDialog(null, nullPointerException.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_btnAtivarActionPerformed

    private void mudarTemaWindows(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mudarTemaWindows
        try {
            Tema.mudar(Tema.WINDOWS, this);
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mudarTemaWindows

    private void mudarTemaMetal(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mudarTemaMetal
        try {
            Tema.mudar(Tema.METAL, this);
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mudarTemaMetal

    private void mudarTemaNimbus(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mudarTemaNimbus
        try {
            Tema.mudar(Tema.NIMBUS, this);
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mudarTemaNimbus

    private void mudarTemaFlatLafLight(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mudarTemaFlatLafLight
        try {
            Tema.mudar(Tema.FLATLAF_LIGHT, this);
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mudarTemaFlatLafLight

    private void mudarTemaFlatLafDark(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mudarTemaFlatLafDark
        try {
            Tema.mudar(Tema.FLATLAF_DARK, this);
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mudarTemaFlatLafDark

    private void mudarTemaFlatLafMacDark(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mudarTemaFlatLafMacDark
        try {
            Tema.mudar(Tema.FLATLAF_MAC_DARK, this);
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mudarTemaFlatLafMacDark

    private void mudarTemaFlatLafIntellij(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mudarTemaFlatLafIntellij
        try {
            Tema.mudar(Tema.FLATLAF_INTELLIJ, this);
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mudarTemaFlatLafIntellij

    private void mudarTemaFlatLafMacLight(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mudarTemaFlatLafMacLight
        try {
            Tema.mudar(Tema.FLATLAF_MAC_LIGHT, this);
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mudarTemaFlatLafMacLight

    private void mudarTemaFlatLafDarcula(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mudarTemaFlatLafDarcula
        try {
            Tema.mudar(Tema.FLATLAF_DARCULA, this);
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mudarTemaFlatLafDarcula

    private void abrirLinkGithub(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirLinkGithub
        try {
            if(Desktop.isDesktopSupported()) {
                Desktop.getDesktop().browse(URI.create("https://github.com/Augusto-Calisto/shutdown-os"));
            }
        } catch(IOException ioException) {
            JOptionPane.showMessageDialog(null, ioException.getMessage(), NOME_DA_APLICACAO_DESKTOP, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_abrirLinkGithub

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        IconeBandeja bandeja = IconeBandeja.getSingleton(this);
        
        TrayIcon trayIcon = bandeja.getTrayIcon();
        
        trayIcon.displayMessage(NOME_DA_APLICACAO_DESKTOP, "Aplicativo minimizado", TrayIcon.MessageType.INFO);
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtivar;
    private javax.swing.JComboBox<String> comboBoxOpcao;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePicker;
    private javax.swing.JLabel lblSelecionarOpcao;
    private javax.swing.JLabel lblSelecionarTempo;
    private javax.swing.JSeparator linhaHorizontal;
    private javax.swing.JMenu menuAjuda;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItemFlatLafDarcula;
    private javax.swing.JMenuItem menuItemFlatLafDark;
    private javax.swing.JMenuItem menuItemFlatLafIntellij;
    private javax.swing.JMenuItem menuItemFlatLafLight;
    private javax.swing.JMenuItem menuItemFlatLafMacDark;
    private javax.swing.JMenuItem menuItemFlatLafMacLight;
    private javax.swing.JMenuItem menuItemGithub;
    private javax.swing.JMenuItem menuItemMetal;
    private javax.swing.JMenuItem menuItemNimbus;
    private javax.swing.JMenuItem menuItemWindows;
    private javax.swing.JMenu menuTemas;
    // End of variables declaration//GEN-END:variables

    public PromptCommand getPromptCommand() {
        return promptCommand;
    }

    public void setPromptCommand(PromptCommand promptCommand) {
        this.promptCommand = promptCommand;
    }

    public boolean isProcessoAtivado() {
        return processoAtivado;
    }

    public void setProcessoAtivado(boolean processoAtivado) {
        this.processoAtivado = processoAtivado;
    }

    public DateTimePicker getDateTimePicker() {
        return dateTimePicker;
    }

    public void setDateTimePicker(DateTimePicker dateTimePicker) {
        this.dateTimePicker = dateTimePicker;
    }

    public JComboBox<String> getComboBoxOpcao() {
        return comboBoxOpcao;
    }

    public void setComboBoxOpcao(JComboBox<String> comboBoxOpcao) {
        this.comboBoxOpcao = comboBoxOpcao;
    }

    public long getPidProcesso() {
        return pidProcesso;
    }

    public void setPidProcesso(long pidProcesso) {
        this.pidProcesso = pidProcesso;
    }
}